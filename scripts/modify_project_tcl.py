##############################################################
# This script applies a few changes to the TCL script
# generated by the "write_project_tcl" function
##############################################################

#Necessary for working with files
import os

#Necessary for access to argv
import sys

#Path to tcl script to modify
original_tcl = sys.argv[2]+sys.argv[1]

#Path to backup of original script
# backup_tcl = original_tcl+".backup"

#Path to project root directory
root_dir = sys.argv[2]

#Path to BD directory relative to root directory
bd_dir = sys.argv[3]

#BD tcl scripts list
bd_files = []

#Iterate over every file in BD folder
for file in os.listdir(root_dir+bd_dir):	
	#We take only the .tcl files
	if file.endswith(".tcl"):
		bd_files.append(file)

#flags
skip_mode = False
bd_inserted = False

#Files excluded from remote sources sections in comments
exclude_from_comments = [".prj", ".bd"]

#Files excluded from fileset
exclude_from_fileset = [".prj", ".bd"]

#Find excluded filenames in line
def excluded_filename_is_found(exclude_list, line):
	for name in exclude_list:
		if line.find(name) != -1:
			return True
	return False
	
#We open a temporary file to store the new information in it
with open("tmp.tcl","w+") as tmp:
	
	#Opens up the tcl script
	with open(original_tcl, "r+") as f:
	
		#starting from the beginning of the file
		f.seek(0)
		
		#Going through the file one line at the time
		for line in f:
		
			#Strips the line of the line changing function -> makes it easier to compare strings
			line = line.rstrip("\n")

			#Check skip mode flag
			if skip_mode:
				#Disable skip mode if next file properties begin or comment appears
				if line.lstrip().startswith('set file "$') or line.lstrip().startswith('#') :
					skip_mode = False
				#Continue skip lines
				else:
					continue
								
			#Add -force option to create_project command: 			
			if line.lstrip().startswith("create_project") and line.find("-part") != -1 :				
				words = line.split(' ')
				for idx, word in enumerate(words):
					if (word == "-part"):
						words[idx] = "-force -part"					
				line = " ".join(words)	
				tmp.write(line+"\n")
				continue

			#Remove wrappers and MIG projects from remote sources section in comments
			if line.startswith("#") and excluded_filename_is_found(exclude_from_comments, line):
				continue

			#Remove importing of wrappers and MIG projects
			if line.find("file normalize") != -1 and excluded_filename_is_found(exclude_from_fileset, line):
				continue

			#Check for empty list when importing remote files
			if line.lstrip().startswith("add_files -norecurse -fileset"):
				words = line.split(' ')
				tmp.write("if {[llength " + words[-1] + " ] > 0} {add_files -norecurse -fileset " + words[-2] + " " + words[-1] + "}\n")
				continue

			#Skip setting file properties for removed imported files
			if line.lstrip().startswith("set file") and excluded_filename_is_found(exclude_from_fileset, line):
				skip_mode = True
				tmp.write("# Removed\n")
				continue

			#Insert BD creation and backup origin_dir variable after setting source fileset	object
			if len(bd_files) > 0 and not bd_inserted and line.lstrip().startswith("# Set") and line.rstrip().endswith("fileset file properties for remote files"):				
				tmp.write("# Back up origin_dir value\n")			
				tmp.write("set origin_dir_tmp $origin_dir\n\n")
				for bd_file in bd_files:
					tmp.write("# Create BD "+bd_file.rstrip(".tcl")+"\n")
					tmp.write("source ./"+bd_dir+bd_file+"\n\n")
				tmp.write("# Restore origin_dir value\n")
				tmp.write("set origin_dir $origin_dir_tmp\n\n")
				tmp.write(line+"\n")
				bd_inserted = True
				continue
			
			if line.find("Import local files") != -1 :
				raise Exception("ERROR: Vivado project contains local files - generation of TCL script is impossible. Remove local files from project and try again.")
				
			#Add command to exit Vivado shell
			if line.find("INFO: Project created") != -1 :
				tmp.write(line+"\n\n")
				tmp.write("exit\n")
				continue

			#Copy line by default
			tmp.write(line+"\n")		
		
			
	#Remove old backup
	# if (os.path.isfile(backup_tcl)):
	# 	os.remove(backup_tcl)

	#Backup original file
	# os.rename(original_tcl, backup_tcl)

	#Starting at the beginning of the temp file
	tmp.seek(0)	
	
	#Opening the original file to write in it
	with open(original_tcl,"w") as f:
	
		#Starting at the beginning of the original file
		f.seek(0)
		for line in tmp :
			#Writing each line 
			f.write(line)
				
#Removing the temporary file

os.remove("tmp.tcl")
